# -*- coding: utf-8 -*-
"""mnist_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OyMWetTysnpDtov2fOF8a7DT9Wji35Mu
"""

#This is basic implementation of image classfication in keras 
#First we import all the requires packages
from keras import Sequential
from keras.layers import Dense
from keras.datasets import mnist
import numpy as np
from keras.utils import np_utils

# Here we import the sequntial model and dense layer 
from keras import Sequential
from keras.layers import Dense

#Here we do this analysis on open source available data mnist here we import it

(x_train, y_train), (x_test, y_test) =mnist.load_data()

# we plot first 4 images 

import matplotlib.pyplot as plt

plt.subplot(221)
plt.imshow(x_train[0], cmap=plt.get_cmap('gray'))
plt.subplot(222)
plt.imshow(x_train[1], cmap=plt.get_cmap('gray'))
plt.subplot(223)
plt.imshow(x_train[2], cmap=plt.get_cmap('gray'))
plt.subplot(224)
plt.imshow(x_train[3], cmap=plt.get_cmap('gray'))
# show the plot
plt.show()

# the images are of size 28*28 so we convert them to sigle vector of 784 pixels 

x_train=x_train.reshape(x_train.shape[0],784)
x_test=x_test.reshape(x_test.shape[0],784)

# we normalize them for better prediction
x_train=x_train/255
x_test=x_test/255

# Convert the target label to numeric

y_train=np_utils.to_categorical(y_train)
y_test=np_utils.to_categorical(y_test)

# we build a simple model of 1 hidden layer

model=Sequential()
model.add(Dense(784,activation='relu',input_shape=(784,)))
model.add(Dense(10,activation='softmax'))

model.compile(optimizer='adam',metrics=['accuracy'],loss='categorical_crossentropy')

model.fit(x_train,y_train,epochs=10,validation_data=(x_test,y_test), batch_size=200, verbose=2)

# model predicted accuracy of 98 %

sc=model.evaluate(x_test,y_test,verbose=1)
print(sc)